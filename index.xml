<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zhitao Lin&#39;s Site</title>
    <link>http://liamlin.top/</link>
    <description>Recent content on Zhitao Lin&#39;s Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Jul 2019 14:14:05 -0400</lastBuildDate>
    
	<atom:link href="http://liamlin.top/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>浅尝Python函数式编程</title>
      <link>http://liamlin.top/posts/%E6%B5%85%E5%B0%9Dpython%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Mon, 08 Jul 2019 14:14:05 -0400</pubDate>
      
      <guid>http://liamlin.top/posts/%E6%B5%85%E5%B0%9Dpython%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid>
      <description>Part one &amp;ndash; 函数式编程的特性
part two &amp;ndash; Map
part three &amp;ndash; Reduce
part four &amp;ndash; Filter
part five &amp;ndash; Currying
函数式编程的特性 函数是一等公民，也就是说，你能应用到数据（对象）的事情，同样也能应用到函数上。比如说，把一个函数作为参数传递到另外一个函数。 使用递归进行主要的控制结构，在一些函数式编程语言（当然不包括Python）中，甚至没有“for”或者“while”循环这个概念。 列表（List）常常会作为数据处理的核心。 函数常常没有副作用，即对于某一个函数F，同样的输出往往会得到同样的结果，这是和数学上的函数等价的。因此，程序员需要充分考虑全局变量的必要性，能弃则弃。 函数式编程更关心程序要做什么，而不是怎么去做。 在函数式编程中，Higher order Function 承担着一个重要的角色。
通过上述的这些特性，函数式编程的往往能加快开发的效率，减少开发周期和提供更少BUG的、更具有可读性的代码。
支持函数式编程的语言不胜其数，比较流行的有Lisp、Scheme、Haskell、Erlang、Racket和Scala等等。当然，虽然Python不是一门函数式编程的语言，但也提供了许多支持函数式编程的特性。
Python函数式编程主由map, reduce, filter 和 apply四个函数以及Lambda表达式组成。别少看了这四个函数和一个表达式。单纯地使用它们，就可以实现所有的Python控制流操作（if, elif, else, assert, try, except, for, break, continue, while, def) 。虽说纯粹地使用它们来编写Python的程序十分奇怪（也不应该这样做），但是通过对这四个函数和一个算子的学习，我们不仅能通过它们的使用来缩短程序，增加可读性，还能学会函数式编程的基本思想，为以后其他语言的学习打下基础。
Lambda表达式 Lambda 表达式的语法十分简单：
lambda argvs: expression
Lambda表达式可以创造出一个匿名的函数对象，当然我们可以用变量来储存这个函数对象。
我们现在用Lambda表达式来创造函数add，这个函数接受两个参数x, y，返回x + y的结果。
add = lambda x, y: x + y` add(3,4) # 结果为 7  上述程序等价于：</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>http://liamlin.top/about-me/</link>
      <pubDate>Sat, 29 Jun 2019 15:10:19 -0400</pubDate>
      
      <guid>http://liamlin.top/about-me/</guid>
      <description>Hi, there. I am Zhitao Lin, an undergraduate of Software Engineering.
E-mail: lamchito@outlook.com</description>
    </item>
    
    <item>
      <title>The Stupid Way to GRE 330</title>
      <link>http://liamlin.top/posts/the-stupid-way-to-gre-330/</link>
      <pubDate>Sat, 29 Jun 2019 14:08:56 -0400</pubDate>
      
      <guid>http://liamlin.top/posts/the-stupid-way-to-gre-330/</guid>
      <description>Part one &amp;ndash; vocabulary
part two &amp;ndash; verbal
part three &amp;ndash; quantity
part four &amp;ndash; writing
part five &amp;ndash; the end
prologue : i spent two and a half months to prepare the gre exam and get a 161 in verbal and 169 in quantity. i literally don’t have talent in language things. but luckily, i am hard working and stick to a stupid but correct path. i absorbed most of the following ideas for the preparation of gre from zhihu.</description>
    </item>
    
    <item>
      <title>Selfish Mining in Bitcoin</title>
      <link>http://liamlin.top/posts/selfish-mining-in-bitcoin/</link>
      <pubDate>Sun, 28 Oct 2018 16:01:34 -0400</pubDate>
      
      <guid>http://liamlin.top/posts/selfish-mining-in-bitcoin/</guid>
      <description>Assignment for COMP3334, Computer System Security, PolyU
Part one -- Introduction to Bitcoin part two -- Selfish Mining Strategy part three -- Implementation of Selfish Mining part four -- Selfish Mining’s Revenue part five -- Solution part six -- My View and Future Works part seven -- Reference  Introduction to Bitcoin Bitcoin is a peer-to-peer electronic cash system that aims to support the completely non- reversible transactions, due to its cryptographic proof based system, and allow two willing parties to transact directly with each other without the need for a trusted third party.</description>
    </item>
    
  </channel>
</rss>